#pragma once

//////////////////////////////////////////////////////////////////////////////////////////////
// Automatically generated model file for the UE4 PlayFab plugin.
// This model file contains the request and response USTRUCTS
//
// API: <%- api.name %>
//////////////////////////////////////////////////////////////////////////////////////////////

#include "Kismet/BlueprintFunctionLibrary.h"
#include "PlayFabEnums.h"
#include "PlayFab<%- api.name %>Models.generated.h"

class UPlayFabJsonObject;

//////////////////////////////////////////////////////////////////////////
// Generated PlayFab <%- api.name %> API Functions
//////////////////////////////////////////////////////////////////////////
<%
// This loop goes through the subgroups of the api and orders the functions in groups.
// It makes it a little easier to navigate.
// Array to hold already printed models. That way we dont duplicate
var modelsArray = [];
for(var subgroup in api.subgroups)
{
%>

///////////////////////////////////////////////////////
// <%- api.subgroups[subgroup].name %>
//////////////////////////////////////////////////////
<%  // This loop goes through all the api calls.
    // It checks to see if the subgroup is the correct subgroup we are currently on.
    // If so it creates the function definition with the summary text.
    // This allows us to see the summary in UE4 when we hover over a node.

    for(var i in api.calls)
    {
        var apiCall = api.calls[i];
        if(apiCall.subgroup !== api.subgroups[subgroup].name) continue;

        // This loop goes through the datatypes and creates UStructs for each
        for(var i in api.datatypes)
        {
            var datatype = api.datatypes[i];
            if(datatype.name != apiCall.request && datatype.name != apiCall.result) continue;

            //Check if datatype has been made already
            if (modelsArray.indexOf(datatype.name.toString()) > -1) {continue;}

            // Add datatype name to array
            modelsArray.push(datatype.name.toString());

%>
USTRUCT(BlueprintType)
struct F<%- api.name %><%- datatype.name %>
{
    GENERATED_USTRUCT_BODY()
public:
<%          // Now loop through all the properties to create the variables for the struct
            for(var z in datatype.properties)
            {
                var property = datatype.properties[z];
                if(property.name == "TitleId" && datatype.name.endsWith("Request")) continue;
%><%- GenerateSummary("    ", property, "description")
%>    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | <%- api.name %> | <%- api.subgroups[subgroup].name %> Models")
        <%- GetPropertyCppType(property, datatype) %>
<% } %>};
<%
        }
    }
}
%>
